@page
@model api.Pages.Admin.Dashboard.IndexModel
@using System.Globalization
@using System.Text.Json
@{
    ViewData["Title"] = "Dashboard";
    ViewData["PageTitle"] = "Dashboard";
    Layout = "_Layout";
}

<div class="space-y-6 max-w-full ">
    <div class="bg-[#1E293B] rounded-xl shadow-md p-4 flex items-center gap-4">
        <label for="fromDate" class="text-white text-sm font-medium">From:</label>
        <input type="date" id="fromDate" class="bg-gray-700 text-white rounded-md p-2 border border-gray-600"
            value="@Model.FromDate.ToString("yyyy-MM-dd")" />

        <label for="toDate" class="text-white text-sm font-medium">To:</label>
        <input type="date" id="toDate" class="bg-gray-700 text-white rounded-md p-2 border border-gray-600"
            value="@Model.ToDate.ToString("yyyy-MM-dd")" />

        <button id="applyFilterBtn"
            class="bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-md transition duration-300 ease-in-out">
            Apply Filter
        </button>
    </div>

    <div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4">
        <div class="bg-[#1E293B] rounded-xl shadow-md p-6">
            <div class="flex items-start justify-between">
                <div>
                    <p class="text-xl font-medium text-white">Total Revenue</p>
                    @* <p class="text-xs text-gray-400">Last 30 days</p> // Cái này giờ sẽ phụ thuộc vào from-to *@
                    <p class="text-2xl font-bold text-white mt-2">
                        @if (Model.Summary != null)
                        {
                            @Model.Summary.totalAmount.ToString("C0", CultureInfo.GetCultureInfo("vi-VN"))
                        }
                    </p>
                </div>
                <div class="w-12 h-12 rounded-lg flex items-center justify-center mt-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-hand-coins-icon lucide-hand-coins text-[#4CAF50]">
                        <path d="M11 15h2a2 2 0 1 0 0-4h-3c-.6 0-1.1.2-1.4.6L3 17" />
                        <path
                            d="m7 21 1.6-1.4c.3-.4.8-.6 1.4-.6h4c1.1 0 2.1-.4 2.8-1.2l4.6-4.4a2 2 0 0 0-2.75-2.91l-4.2 3.9" />
                        <path d="m2 16 6 6" />
                        <circle cx="16" cy="9" r="2.9" />
                        <circle cx="6" cy="5" r="3" />
                    </svg>
                </div>
            </div>
        </div>

        <div class="bg-[#1E293B] rounded-xl shadow-md p-6">
            <div class="flex items-start justify-between">
                <div>
                    <p class="text-xl font-medium text-white">Total Orders</p>
                    @* <p class="text-xs text-gray-400">Last 30 days</p> *@
                    <p class="text-2xl font-bold text-white mt-2">
                        @if (Model.Summary != null)
                        {
                            @Model.Summary.totalOrder
                        }
                    </p>
                </div>
                <div class="w-12 h-12 rounded-lg flex items-center justify-center mt-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-package-icon lucide-package text-[#2196F3]">
                        <path
                            d="M11 21.73a2 2 0 0 0 2 0l7-4A2 2 0 0 0 21 16V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73z" />
                        <path d="M12 22V12" />
                        <polyline points="3.29 7 12 12 20.71 7" />
                        <path d="m7.5 4.27 9 5.15" />
                    </svg>
                </div>
            </div>
        </div>

        <div class="bg-[#1E293B] rounded-xl shadow-md p-6">
            <div class="flex items-start justify-between">
                <div>
                    <p class="text-xl font-medium text-white">Total Customer</p>
                    @* <p class="text-xs text-gray-400">Last 30 days</p> *@
                    <p class="text-2xl font-bold text-white mt-2">
                        @if (Model.Summary != null)
                        {
                            @Model.Summary.totalCustomer
                        }
                    </p>
                </div>
                <div class="w-12 h-12 rounded-lg flex items-center justify-center mt-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-user-round-icon lucide-user-round text-[#9C27B0]">
                        <circle cx="12" cy="8" r="5" />
                        <path d="M20 21a8 8 0 0 0-16 0" />
                    </svg>
                </div>
            </div>
        </div>

        <div class="bg-[#1E293B] rounded-xl shadow-md p-6">
            <div class="flex items-start justify-between">
                <div>
                    <p class="text-xl font-medium text-white">Pending Order</p>
                    @* <p class="text-xs text-gray-400">Last 30 days</p> *@
                    <p class="text-2xl font-bold text-white mt-2">
                        @if (Model.Summary != null)
                        {
                            @Model.Summary.totalPendingOrder
                        }
                    </p>
                </div>
                <div class="w-12 h-12 rounded-lg flex items-center justify-center mt-1">
                    <svg xmlns="http://www.w3.org/2000/svg" width="50" height="50" viewBox="0 0 24 24" fill="none"
                        stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"
                        class="lucide lucide-package-check-icon lucide-package-check text-[#FF9800]">
                        <path d="m16 16 2 2 4-4" />
                        <path
                            d="M21 10V8a2 2 0 0 0-1-1.73l-7-4a2 2 0 0 0-2 0l-7 4A2 2 0 0 0 3 8v8a2 2 0 0 0 1 1.73l7 4a2 2 0 0 0 2 0l2-1.14" />
                        <path d="m7.5 4.27 9 5.15" />
                        <polyline points="3.29 7 12 12 20.71 7" />
                        <line x1="12" x2="12" y1="22" y2="12" />
                    </svg>
                </div>
            </div>
        </div>
    </div>

    <div class="flex w-full gap-4">
        <div style="flex: 7" class="bg-[#1E293B] rounded-xl p-6 flex flex-col">
            <div class="flex items-center justify-between mb-4">
                <span class="font-semibold text-white text-lg">Sales Analytic</span>
                @* Remove the select dropdown as granularity is now determined by backend *@
                @* <div class="relative">
                    <select id="chartType"
                        class="appearance-none bg-[#1E293B] border text-center border-gray-300 text-white py-2 p-4 rounded-xl shadow transition text-sm font-medium">
                        <option value="day">Day</option>
                        <option value="week">Week</option>
                        <option value="month">Month</option>
                    </select>
                </div> *@
                <span id="chartGranularityLabel" class="text-gray-400 text-sm"></span>
            </div>
            <div class="flex-1 flex items-center">
                <canvas id="revenueChart" height="200"></canvas>
            </div>
        </div>
        <div style="flex: 3" class="bg-[#1E293B] rounded-xl p-6">
            <div>
                <p class="text-xl text-center font-medium text-white">Top 5 tỉnh có đơn hàng nhiều nhất</p>
            </div>
            <div class="overflow-auto flex justify-start" id="vn-map-container">

            </div>
            <div class="mt-6">
                <ul class="bg-[#1E293B] shadow rounded-lg divide-y divide-gray-200 max-w-sm">
                    @foreach (var location in Model.TopLocations)
                    {
                        <li class="flex justify-between items-center px-4 py-2 text-white">
                            <span>@location.city</span>
                            <span class="font-semibold">@location.totalSold đơn</span>
                        </li>
                    }
                </ul>
            </div>
        </div>
    </div>

    <div class="bg-[#1E293B] p-4 rounded shadow-md max-w-full">
        <div class="flex justify-between items-center mb-4">
            <h2 class="text-xl font-semibold text-white">Top Selling Products</h2>
            <div class="flex gap-2">
                <button id="scrollLeftBtn"
                    class="p-2 rounded-full bg-gray-700 text-gray-300 hover:bg-gray-600 focus:outline-none">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd"
                            d="M12.707 5.293a1 1 0 010 1.414L9.414 10l3.293 3.293a1 1 0 01-1.414 1.414l-4-4a1 1 0 010-1.414l4-4a1 1 0 011.414 0z"
                            clip-rule="evenodd" />
                    </svg>
                </button>
                <button id="scrollRightBtn"
                    class="p-2 rounded-full bg-gray-700 text-gray-300 hover:bg-gray-600 focus:outline-none">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" viewBox="0 0 20 20" fill="currentColor">
                        <path fill-rule="evenodd"
                            d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z"
                            clip-rule="evenodd" />
                    </svg>
                </button>
            </div>
        </div>

        <div id="productsScrollContainer" class="overflow-x-hidden scroll-smooth" style="width: 1024px;">
            <div id="productsInnerContainer" class="flex gap-4">
                @foreach (var product in Model.TopProducts)
                {
                    <div class="w-48 flex-shrink-0 bg-gray-100 rounded-lg overflow-hidden shadow">
                        <img src="@product.image" alt="@product.productName" class="w-full h-48 object-cover">
                        <div class="p-2 flex flex-col h-auto">
                            <p class="product-name text-sm font-semibold text-black mb-auto">@product.productName</p>
                            <div class="flex justify-between items-center mt-2">
                                <p class="text-sm font-bold text-gray-800">
                                    @product.price.ToString("C0", CultureInfo.GetCultureInfo("vi-VN"))
                                </p>
                                <p class="text-xs text-gray-500">Đã bán @product.totalSold cái</p>
                            </div>
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>

</div>

@section Scripts {
    <style>
        .product-name {
            display: -webkit-box;
            -webkit-line-clamp: 2; 
            -webkit-box-orient: vertical;
            overflow: hidden;
            text-overflow: ellipsis;
            word-break: break-word;
            height: 42px;
            line-height: 1.5; 
        }
    </style>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <script>
        let chart;
        const fromDateInput = document.getElementById('fromDate');
        const toDateInput = document.getElementById('toDate');
        const applyFilterBtn = document.getElementById('applyFilterBtn');
        const chartGranularityLabel = document.getElementById('chartGranularityLabel');

        async function updateChart(fromDate, toDate) {
            const res = await fetch(`?handler=ChartData&fromDate=${fromDate}&toDate=${toDate}`);
            const responseData = await res.json();

            const labels = responseData.data.map(item => item.label);
            const values = responseData.data.map(item => item.totalRevenue);
            const granularity = responseData.granularity;

            chartGranularityLabel.textContent = `Granularity: ${granularity.charAt(0).toUpperCase() + granularity.slice(1)}`;

            if (!chart) {
                const ctx = document.getElementById('revenueChart').getContext('2d');
                chart = new Chart(ctx, {
                    type: 'line',
                    data: {
                        labels: labels,
                        datasets: [{
                            label: 'Revenue',
                            data: values,
                            borderColor: '#2196F3',
                            backgroundColor: 'rgba(33,150,243,0.1)',
                            fill: true,
                            tension: 0.4,
                            pointRadius: 5,
                            pointBackgroundColor: '#2196F3',
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: { display: false }
                        },
                        scales: {
                            y: {
                                beginAtZero: true,
                                ticks: {
                                    callback: function (value) {
                                        if (value >= 1_000_000_000) {
                                            return (value / 1_000_000_000).toLocaleString('vi-VN', { maximumFractionDigits: 1 }) + "B";
                                        }
                                        else if (value >= 1_000_000) {
                                            return (value / 1_000_000).toLocaleString('vi-VN', { maximumFractionDigits: 1 }) + "M";
                                        } else {
                                            return value.toLocaleString('vi-VN');
                                        }
                                    }
                                }
                            }
                        }
                    }
                });
            } else {
                chart.data.labels = labels;
                chart.data.datasets[0].data = values;
                chart.update();
            }
        }

        async function loadDashboardData() {
            const from = fromDateInput.value;
            const to = toDateInput.value;
            window.location.href = `?fromDate=${from}&toDate=${to}`;
        }

        document.addEventListener('DOMContentLoaded', () => {
            updateChart('@Model.FromDate.ToString("yyyy-MM-dd")', '@Model.ToDate.ToString("yyyy-MM-dd")');
            applyFilterBtn.addEventListener('click', loadDashboardData);
        });
    </script>

    <script>
        // --- BẢN ĐỒ ÁNH XẠ TÊN TỈNH/THÀNH VỚI ID SVG (ĐÃ CẬP NHẬT TỪ DỮ LIỆU CỦA BẠN) ---
        const provinceMap = {
            'kon tum': 'VN28',
            'đắk nông': 'VN72',
            'đắk lắk': 'VN33',
            'gia lai': 'VN30',
            'bình phước': 'VN58',
            'tây ninh': 'VN37',
            'long an': 'VN41',
            'đong tháp': 'VN45', // Lưu ý: 'Ðong Tháp' từ SVG đã được chuyển thành 'dong thap' không dấu. Nếu backend của bạn trả về có dấu, bạn cần điều chỉnh.
            'an giang': 'VN44',
            'kiên giang': 'VN47',
            'điện biên': 'VN71',
            'son la': 'VN05', // 'Son La' từ SVG
            'thanh hóa': 'VN21',
            'nghệ an': 'VN22',
            'ha tinh': 'VN23', // 'Ha Tinh' từ SVG
            'quảng bình': 'VN24',
            'quảng trị': 'VN25',
            'thừa thiên - huế': 'VN26',
            'quàng nam': 'VN27', // 'Quàng Nam' từ SVG
            'hà giang': 'VN03',
            'cao bằng': 'VN04',
            'lào cai': 'VN02',
            'lai chau': 'VN01', // 'Lai Chau' từ SVG
            'lạng sơn': 'VN09',
            'quảng ninh': 'VN13',
            'sóc trăng': 'VN52',
            'tiền giang': 'VN46',
            'bà rịa - vũng tàu': 'VN43',
            'tp.hồ chí minh': 'VNSG',
            'khánh hòa': 'VN34',
            'cà mau': 'VN59',
            'bạc liêu': 'VN55',
            'hau giang': 'VN73', // 'Hau Giang' từ SVG
            'vĩnh long': 'VN49',
            'trà vinh': 'VN51',
            'bến tre': 'VN50',
            'đông nam bộ': 'VN39', // Đây là một vùng, không phải tỉnh. Cần cân nhắc có highlight không.
            'bình thuận': 'VN40',
            'ninh thuận': 'VN36',
            'phú yên': 'VN32',
            'bình định': 'VN31',
            'quảng ngãi': 'VN29',
            'đà nẵng': 'VNDN',
            'ninh bình': 'VN18',
            'nam định': 'VN67',
            'thái bình': 'VN20',
            'hải phòng': 'VNHP',
            'hòa bình': 'VN14',
            'tuyên quang': 'VN07',
            'yên bái': 'VN06',
            'vĩnh phúc': 'VN70',
            'phú thọ': 'VN68',
            'ha noi': 'VNHN', // 'Ha Noi' từ SVG
            'đông bắc': 'VN53', // Vùng
            'đồng bằng sông hồng': 'VN66', // Vùng
            'bắc ninh': 'VN56',
            'bắc giang': 'VN54',
            'thái nguyên': 'VN69',
            'hải dương': 'VN61',
            'hà nam': 'VN63',
            'bình dương': 'VN57',
            'lâm đồng': 'VN35',
            'can tho': 'VNCT' // 'Can Tho' từ SVG
        };

        fetch('/svg/vn-map.svg')
            .then(res => res.text())
            .then(svg => {
                document.getElementById('vn-map-container').innerHTML = svg;

                const topLocationsData = @Html.Raw(JsonSerializer.Serialize(Model.TopLocations));
                console.log("TopLocations Data from Model:", topLocationsData); // THÊM DÒNG NÀY
                const locationMap = new Map();

                topLocationsData.forEach(loc => {
                    // Chuẩn hóa tên thành phố từ backend (chữ thường, loại bỏ khoảng trắng thừa)
                    const normalizedCityName = loc.city.toLowerCase().trim();
                    const svgId = provinceMap[normalizedCityName]; // Sử dụng bảng ánh xạ

                    if (svgId) {
                        // Kiểm tra xem phần tử SVG có tồn tại không trước khi cố gắng thay đổi style
                        const path = document.getElementById(svgId);
                        if (path) {
                            locationMap.set(svgId, loc.totalSold);
                        } else {
                            console.warn(`SVG path with ID '${svgId}' not found for city '${loc.city}'`);
                        }
                    } else {
                        console.warn(`No SVG ID found in provinceMap for city: '${loc.city}'`);
                    }
                });

                document.querySelectorAll('#vn-map-container path').forEach(path => {
                    const id = path.id;
                    if (locationMap.has(id)) {
                        // Tùy chỉnh màu sắc dựa trên số lượng đơn hàng nếu muốn
                        // Ví dụ: màu đậm hơn cho số lượng lớn hơn
                        path.style.fill = "#FF9800"; // Màu nổi bật cho các tỉnh/thành phố top
                        path.style.stroke = "#fff";
                        path.style.strokeWidth = "2";
                    } else {
                        path.style.fill = "#4A5568"; // Màu mặc định cho các tỉnh/thành phố khác (màu xám đậm)
                        path.style.stroke = "#fff";
                        path.style.strokeWidth = "1";
                    }
                });

                // Nếu bạn cũng có các ID cho các vùng lớn như "Đông Nam Bộ" hay "Đông Bắc"
                // và bạn muốn highlight chúng nếu chúng xuất hiện trong topLocations,
                // bạn có thể thêm logic tương tự ở đây.
                // Tuy nhiên, thông thường bản đồ cấp tỉnh thì chỉ highlight tỉnh.

            });
    </script>

    <script>
        document.addEventListener('DOMContentLoaded', () => {
            const productsScrollContainer = document.getElementById('productsScrollContainer');
            const productsInnerContainer = document.getElementById('productsInnerContainer');
            const scrollLeftBtn = document.getElementById('scrollLeftBtn');
            const scrollRightBtn = document.getElementById('scrollRightBtn');

            const productWidth = 192; // w-48 = 12rem = 192px (1rem = 16px)
            const gapWidth = 16;     // gap-4 = 1rem = 16px
            const itemsToScroll = 4;
            const scrollAmount = (productWidth + gapWidth) * itemsToScroll;

            function updateScrollButtons() {
                if (!productsScrollContainer || !scrollLeftBtn || !scrollRightBtn) return;

                scrollLeftBtn.disabled = productsScrollContainer.scrollLeft <= 0;
                scrollLeftBtn.classList.toggle('opacity-50', productsScrollContainer.scrollLeft <= 0);

                const maxScrollLeft = productsScrollContainer.scrollWidth - productsScrollContainer.clientWidth;
                scrollRightBtn.disabled = productsScrollContainer.scrollLeft >= maxScrollLeft - 1;
                scrollRightBtn.classList.toggle('opacity-50', productsScrollContainer.scrollLeft >= maxScrollLeft - 1);
            }

            scrollRightBtn.addEventListener('click', () => {
                if (productsScrollContainer) {
                    productsScrollContainer.scrollBy({
                        left: scrollAmount,
                        behavior: 'smooth'
                    });
                }
            });

            scrollLeftBtn.addEventListener('click', () => {
                if (productsScrollContainer) {
                    productsScrollContainer.scrollBy({
                        left: -scrollAmount,
                        behavior: 'smooth'
                    });
                }
            });

            productsScrollContainer.addEventListener('scroll', updateScrollButtons);

            updateScrollButtons();
            window.addEventListener('resize', updateScrollButtons);
        });
    </script>
}